<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ecochain.wallet.mapper.EcoWalletMapper">
  <resultMap id="BaseResultMap" type="com.ecochain.wallet.entity.EcoWallet">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="userName" jdbcType="VARCHAR" property="userName" />
    <result column="passWord" jdbcType="VARCHAR" property="passWord" />
    <result column="money" jdbcType="DECIMAL" property="money" />
    <result column="key_type" javaType="java.lang.String" jdbcType="VARCHAR" />
    <result column="bitcoin" jdbcType="DECIMAL" property="bitcoin" />
    <result column="walletAddress" jdbcType="VARCHAR" property="walletAddress" />
    <result column="privateKey" jdbcType="VARCHAR" property="privateKey" />
    <result column="createTime" jdbcType="TIMESTAMP" property="createTime" />
    <result column="updateTime" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, userName, passWord, money, bitcoin, walletAddress, privateKey, createTime, updateTime
  </sql>
  
  <select id="findSanAddress" parameterType="java.lang.String" resultType="java.lang.Integer">
    select count(1) from t_wallet tw where tw.userName=#{userName} and tw.key_type=5
  </select>
  
  <select id="selectByExample" parameterType="com.ecochain.wallet.entity.EcoWalletExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_wallet
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_wallet
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_wallet
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.ecochain.wallet.entity.EcoWalletExample">
    delete from t_wallet
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.ecochain.wallet.entity.EcoWallet" useGeneratedKeys="true">
    insert into t_wallet (userName, passWord, money, 
      bitcoin, walletAddress,key_type, privateKey,
      createTime, updateTime)
    values (#{userName,jdbcType=VARCHAR}, #{passWord,jdbcType=VARCHAR}, #{money,jdbcType=DECIMAL}, 
      #{bitcoin,jdbcType=DECIMAL}, #{walletAddress,jdbcType=VARCHAR},#{keyType,jdbcType=VARCHAR}, #{privateKey,jdbcType=VARCHAR},
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.ecochain.wallet.entity.EcoWallet" useGeneratedKeys="true">
    insert into t_wallet
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userName != null">
        userName,
      </if>
      <if test="passWord != null">
        passWord,
      </if>
      <if test="money != null">
        money,
      </if>
      <if test="bitcoin != null">
        bitcoin,
      </if>
      <if test="walletAddress != null">
        walletAddress,
      </if>
      <if test="privateKey != null">
        privateKey,
      </if>
      <if test="createTime != null">
        createTime,
      </if>
      <if test="updateTime != null">
        updateTime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="passWord != null">
        #{passWord,jdbcType=VARCHAR},
      </if>
      <if test="money != null">
        #{money,jdbcType=DECIMAL},
      </if>
      <if test="bitcoin != null">
        #{bitcoin,jdbcType=DECIMAL},
      </if>
      <if test="walletAddress != null">
        #{walletAddress,jdbcType=VARCHAR},
      </if>
      <if test="privateKey != null">
        #{privateKey,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ecochain.wallet.entity.EcoWalletExample" resultType="java.lang.Long">
    select count(*) from t_wallet
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update t_wallet
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userName != null">
        userName = #{record.userName,jdbcType=VARCHAR},
      </if>
      <if test="record.passWord != null">
        passWord = #{record.passWord,jdbcType=VARCHAR},
      </if>
      <if test="record.money != null">
        money = #{record.money,jdbcType=DECIMAL},
      </if>
      <if test="record.bitcoin != null">
        bitcoin = #{record.bitcoin,jdbcType=DECIMAL},
      </if>
      <if test="record.walletAddress != null">
        walletAddress = #{record.walletAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.privateKey != null">
        privateKey = #{record.privateKey,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        createTime = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        updateTime = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update t_wallet
    set id = #{record.id,jdbcType=INTEGER},
      userName = #{record.userName,jdbcType=VARCHAR},
      passWord = #{record.passWord,jdbcType=VARCHAR},
      money = #{record.money,jdbcType=DECIMAL},
      bitcoin = #{record.bitcoin,jdbcType=DECIMAL},
      walletAddress = #{record.walletAddress,jdbcType=VARCHAR},
      privateKey = #{record.privateKey,jdbcType=VARCHAR},
      createTime = #{record.createTime,jdbcType=TIMESTAMP},
      updateTime = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ecochain.wallet.entity.EcoWallet">
    update t_wallet
    <set>
      <if test="userName != null">
        userName = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="passWord != null">
        passWord = #{passWord,jdbcType=VARCHAR},
      </if>
      <if test="money != null">
        money = #{money,jdbcType=DECIMAL},
      </if>
      <if test="bitcoin != null">
        bitcoin = #{bitcoin,jdbcType=DECIMAL},
      </if>
      <if test="walletAddress != null">
        walletAddress = #{walletAddress,jdbcType=VARCHAR},
      </if>
      <if test="privateKey != null">
        privateKey = #{privateKey,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        createTime = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        updateTime = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ecochain.wallet.entity.EcoWallet">
    update t_wallet
    set userName = #{userName,jdbcType=VARCHAR},
      passWord = #{passWord,jdbcType=VARCHAR},
      money = #{money,jdbcType=DECIMAL},
      bitcoin = #{bitcoin,jdbcType=DECIMAL},
      walletAddress = #{walletAddress,jdbcType=VARCHAR},
      privateKey = #{privateKey,jdbcType=VARCHAR},
      createTime = #{createTime,jdbcType=TIMESTAMP},
      updateTime = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="getUserInfo" parameterType="java.lang.String" resultType="map">
    select tw.walletAddress,tw.privateKey from
      t_wallet tw,user_login ul
      where tw.userName=ul.user_name and tw.key_type=5  and ul.user_id=#{userId}
  </select>

</mapper>